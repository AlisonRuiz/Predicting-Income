library(ggplot2)#graficar
library(tidyverse)#organizar datos
library(xtable)#tablas
library(openxlsx)#lectura xlsx
library(janitor)#tabla de frecuencia
library(here)
source("funcion_descriptivas.R")
source("diferencia_medias.R")
source("funcion_descriptivas.R")
source("funcion_diferencia_medias.R")
geih <-read.xlsx(here("datos","geih.xlsx"))
geih <-read.xlsx(here("stores","geih.xlsx"))
#Filtrado por edad y creacion de la variable female
geih_2 <- geih %>%
filter(age>=18) %>%
mutate(female=ifelse(sex==0,1,0)) %>%
select(-...1)
#¿Qué compone la variable ingtot?
geih_2 %>% select(id_tabla,y_total_m,ingtot,impa,isa,ie,imdi,iof1,iof2,iof3h,iof3i,iof6,
iof1es,iof2es,iof3hes,iof3ies,iof6es,impaes,isaes,iees,imdies) %>%
#crear una nueva variable que sume atraves de las filas de estas variables para verificar si la suma es igual a ingtot
mutate(suma=rowSums(across(c(impa,isa,ie,imdi,iof1,iof2,iof3h,iof3i,iof6,iof1es,
iof2es,iof3hes,iof3ies,iof6es,impaes,isaes,iees,imdies)),na.rm=T) %>% round(.,1),
ingtot=ingtot %>% round(.,1),
suma_ing=suma==ingtot
) %>%
filter(!(suma-ingtot<abs(1)))
#Filtrado por edad y creacion de la variable female
geih_2 <- geih %>%
filter(age>=18) %>%
mutate(female=ifelse(sex==0,1,0)) %>%
rowid_to_column("id_tabla") %>%
select(-...1)
#¿Qué compone la variable ingtot?
geih_2 %>% select(id_tabla,y_total_m,ingtot,impa,isa,ie,imdi,iof1,iof2,iof3h,iof3i,iof6,
iof1es,iof2es,iof3hes,iof3ies,iof6es,impaes,isaes,iees,imdies) %>%
#crear una nueva variable que sume atraves de las filas de estas variables para verificar si la suma es igual a ingtot
mutate(suma=rowSums(across(c(impa,isa,ie,imdi,iof1,iof2,iof3h,iof3i,iof6,iof1es,
iof2es,iof3hes,iof3ies,iof6es,impaes,isaes,iees,imdies)),na.rm=T) %>% round(.,1),
ingtot=ingtot %>% round(.,1),
suma_ing=suma==ingtot
) %>%
filter(!(suma-ingtot<abs(1)))
#comparando impa cuando isa=0 y y_ingLab_m no es NA.
#Se concluye que impa es y_ingLab_m=impa+isa-aux alimento mensual- aux accidentes mensual
geih_2 %>%
filter((isa==0|is.na(isa))&(!is.na(y_ingLab_m))) %>%
#Se debe usar case_when porque sumar cuando hay nas produce nas. Entonces se debe cuidar caso por caso.
mutate(impa_menosauxalim=
case_when(
impa>0&!is.na(impa)&!is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)~(impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
impa>0&!is.na(impa)&is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)~(impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
impa>0&!is.na(impa)&!is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)~(impa-y_auxilioAliment_m) %>% round(.,0),
is.na(y_auxilioAliment_m)~round(impa,0),
TRUE~0
),
y_ingLab_m=round(y_ingLab_m,0),
impa=round(impa,0)
) %>%
select(id_tabla,impa,impa_menosauxalim,y_ingLab_m,isa,y_auxilioAliment_m,y_accidentes_m) %>%
filter(!(impa_menosauxalim-y_ingLab_m<=abs(1)))
#cuando isa>0
# se verifica que cuando isa>0 e y_ingLab_m no es NA, entonces y_ingLab=impa+isa-aux alimento mensual- aux accidentes mensual
geih_2 %>%
filter(isa>0&!is.na(isa)&(!is.na(y_ingLab_m))) %>%
mutate(impa_isa_menos_auxalim_acc=
case_when(
impa>0&!is.na(impa)&!is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
impa>0&!is.na(impa)&is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
impa>0&!is.na(impa)&!is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)~(isa+impa-y_auxilioAliment_m) %>% round(.,0),
is.na(y_auxilioAliment_m)~round(isa+impa,0),
TRUE~isa
),
y_ingLab_m=round(y_ingLab_m,0),
impa=round(impa,0)
) %>%
select(id_tabla,impa,isa,impa_isa_menos_auxalim_acc,y_ingLab_m,y_auxilioAliment_m,y_accidentes_m,y_salary_m,p6500) %>%
filter(!(impa_isa_menos_auxalim_acc-y_ingLab_m<=abs(1))) %>%
view
#cuando isa>0
# se verifica que cuando isa>0 e y_ingLab_m no es NA, entonces y_ingLab=impa+isa-aux alimento mensual- aux accidentes mensual
geih_2 %>%
filter(isa>0&!is.na(isa)&(!is.na(y_ingLab_m))) %>%
mutate(impa_isa_menos_auxalim_acc=
case_when(
impa>0&!is.na(impa)&!is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
impa>0&!is.na(impa)&is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
impa>0&!is.na(impa)&!is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)~(isa+impa-y_auxilioAliment_m) %>% round(.,0),
is.na(y_auxilioAliment_m)~round(isa+impa,0),
TRUE~isa
),
y_ingLab_m=round(y_ingLab_m,0),
impa=round(impa,0)
) %>%
select(id_tabla,impa,isa,impa_isa_menos_auxalim_acc,y_ingLab_m,y_auxilioAliment_m,y_accidentes_m,y_salary_m,p6500) %>%
filter(!(impa_isa_menos_auxalim_acc-y_ingLab_m<=abs(1)))
#cuando no hay ganancia de independientes ( no todos los cuenta propia generan ganancia, algunos tienen ingreso laboral),
#entonces se pueden utilizar impa, impaes, isa, isaes para imputar y_ingLab_m
geih_2 %>%
filter(is.na(y_ingLab_m)&!is.na(y_gananciaIndep_m)) %>%
filter(!is.na(impa)|!is.na(impaes)) %>%
select(id_tabla,impa,isa,impaes,isaes,y_ingLab_m,
y_auxilioAliment_m,y_accidentes_m,y_salary_m,p6500,ends_with("_m"),cuentaPropia) %>% view
#confirmacion: crear una variable ing_lab que contiene la suma de todas las variables anteriores cuidando cuando alguna sea na.
geih_2 %>%
filter(!is.na(y_ingLab_m)) %>%
mutate(
ing_lab=
case_when(
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)-y_gananciaIndep_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)-y_gananciaIndep_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-y_gananciaIndep_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~round(isa+impa,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~round(isa+impa-y_gananciaIndep_m,0),
is.na(isa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~round(impa,0),
is.na(isa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~round(impa-y_gananciaIndep_m,0),
TRUE~0
),
) %>%
filter(!(y_ingLab_m-ing_lab<=abs(1)))
#confirmacion: crear una variable ing_lab que contiene la suma de todas las variables anteriores cuidando cuando alguna sea na.
geih_2 %>%
filter(!is.na(y_ingLab_m)) %>%
mutate(
ing_lab=
case_when(
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)-y_gananciaIndep_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)-y_gananciaIndep_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-y_gananciaIndep_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~round(isa+impa,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~round(isa+impa-y_gananciaIndep_m,0),
is.na(isa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~round(impa,0),
is.na(isa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~round(impa-y_gananciaIndep_m,0),
TRUE~0
),
) %>%
filter(!(y_ingLab_m-ing_lab<=abs(1))) %>% view
#confirmacion: crear una variable ing_lab que contiene la suma de todas las variables anteriores cuidando cuando alguna sea na.
geih_2 %>%
filter(!is.na(y_ingLab_m)) %>%
mutate(
ing_lab=
case_when(
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)-y_gananciaIndep_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)) %>% round(.,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&!is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-(y_accidentes_m/12)-y_gananciaIndep_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&!is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~(isa+impa-y_auxilioAliment_m-y_gananciaIndep_m) %>% round(.,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~round(isa+impa,0),
!is.na(isa)&!is.na(impa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~round(isa+impa-y_gananciaIndep_m,0),
is.na(isa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&is.na(y_gananciaIndep_m)~round(impa,0),
is.na(isa)&is.na(y_auxilioAliment_m)&is.na(y_accidentes_m)&!is.na(y_gananciaIndep_m)~round(impa-y_gananciaIndep_m,0),
TRUE~0
)) %>%
filter(!(y_ingLab_m-ing_lab<=abs(1))) %>% view
geih_3 <- geih_2 %>%
mutate(
impa_imptd=ifelse(is.na(impa)|impa==0,impaes,impa),
isa_imptd=ifelse(is.na(isa)|isa==0,isaes,isa)
) %>%
rowwise() %>%
mutate(
sum_impaisa=sum(impa_imptd,isa_imptd,na.rm=T),
y_ingLab_m_2=ifelse(is.na(y_ingLab_m)&(is.na(y_gananciaIndep_m)|y_gananciaIndep_m==0),
sum_impaisa,y_ingLab_m)
)
geih_3 %>%
filter(college==1) %>%
select(p6210,maxEducLevel) %>% table()
geih_4 <- geih_3 %>% mutate(
college_2=ifelse(p6210%in%6|maxEducLevel%in%7,1,0)
)
getmode <- function(v) {
uniqv <- unique(v)[!is.na(unique(v))]
uniqv[which.max(tabulate(match(v, uniqv)))]
}
x=as.numeric(x)
#Función para tablas de faltantes
na_table <- function(x){
x=as.numeric(x)
missing=sum(is.na(x))
total=length(x)
return(c(missing,total))
}
#Función para descriptivas de variables dependientes
descriptives_table_dependent <- function(x){
x=as.numeric(x)
mean=mean(x,na.rm=T)
median=median(x,na.rm=T)
sd=sd(x,na.rm=T)
pct90=quantile(x,0.9,na.rm=T)
return(c(mean,median,sd,pct90))
}
#Función para descriptivas de variables independientes
descriptives_table_independent <- function(x){
x=as.numeric(x)
mean=mean(x,na.rm=T)
median=median(x,na.rm=T)
mode=getmode(x)
sd=sd(x,na.rm=T)
return(c(mean,median,mode,sd))
}
#Creación de la tabla de faltantes. Output es código latex
createDescriptiveTable(list(geih_4),
summary_function = na_table,
column_names=c("Faltantes","Total"),
variable_names=list(c("ingtot","y_ingLab_m","y_ingLab_m_2")),
variable_labels=list(c("Ingreso total","Ingreso laboral","Ingreso Laboral Imputado")),
arraystretch=1.3,
title="Datos faltantes",
label="tab:missing",
)
#Creación de la tabla de de descriptivas Output es código latex
createDescriptiveTable(list(geih_4),
summary_function = descriptives_table_dependent,
column_names=c("Media","Mediana","D.E.","Percentil 90"),
variable_names=list(c("ingtot","y_ingLab_m","y_ingLab_m_2")),
variable_labels=list(c("Ingreso total","Ingreso laboral","Ingreso Laboral imputado")),
arraystretch=1.3,
title="Estadísticas descriptivas variables dependientes",
label="tab:descriptive_dependent",
)
#Creación de la tabla de de descriptivas Output es código latex
createDescriptiveTable(list(geih_4),
summary_function = descriptives_table_independent,
column_names=c("Media","Mediana","Moda","D.E."),
variable_names=list(c("age","female","college_2","cuentaPropia","formal","oficio")),
variable_labels=list(c("Edad","Mujer","Universidad","Cuenta Propia","Formal","Oficio")),
arraystretch=1.3,
title="Estadísticas descriptivas variables independientes",
label="tab:descriptive_independent",
)
createDescriptiveTable(list(geih_4),
summary_function = descriptives_mean_dif,
column_names=c("Media"),
variable_names=list(c("ingtot","y_ingLab_m_2")),
variable_labels=list(c("Ingreso total","Ingreso laboral")),
arraystretch=1.3,
group_variable = "female",
title="Medias por grupo",
label="tab:mean_group",
)
tabla_diferencia_medias(geih_4,
c("Mujer","Universitario"),
c("Ingreso total","Ingreso laboral"),
c("ingtot","y_ingLab_m_2"),
c("female","college_2")
)
tabla_diferencia_medias(geih_4,
c("Cuenta Propia","Informal"),
c("Ingreso total","Ingreso laboral"),
c("ingtot","y_ingLab_m_2"),
c("cuentaPropia","informal")
)
geih_3 %>%
filter(!is.na(oficio)) %>%
select(oficio) %>%
tabyl(oficio) %>%
arrange(desc(n)) %>%
slice_head(n=10) %>% kable("latex")
dist_ingresos <- geih_4 %>%
select(valor=y_ingLab_m_2,age) %>%
mutate(ingreso="Ingreso Laboral") %>%
bind_rows(
tibble(valor=geih_4$ingtot,ingreso="Ingreso Total",age=geih_4$age)) %>%
filter(!is.na(age)&!is.na(valor)) %>%
mutate(
age_interval=case_when(
age>=18&age<30~"18-30",
age>=30&age<45~"30-45",
age>=45&age<60~"45-60",
age>=60&age<75~"60-75",
age>=75&age<90~"75-90",
age>=90&age<110~"90-110",
TRUE~""))
#Creacion de tabla de frecuencias por ingreso
dist_ingresos %>%
ggplot(., aes(x=age_interval, y=valor))+
#geometria
geom_bar(stat='summary',fun="mean", fill="steelblue")+
#division de gráficos por tipo de ingreso
facet_wrap(~ingreso)+
xlab("")+
ylab("Ingreso promedio")+
#Opciones estéticas, tabla minimalista
theme_bw()+
theme(text=element_text(size=14, color="black"),
panel.grid=element_blank(),
panel.spacing = unit(1, "lines"),
legend.position=c(0.85,0.85),
axis.text.x=element_text(colour="black"),
axis.text.y=element_text(colour="black"),
strip.background = element_blank(),
strip.placement = "outside",
strip.text = element_text(face="bold"))
write.xlsx(geih_4,"geih_final.xlsx")
getwd()
geih <-read.xlsx(here("stores","geih_4.xlsx"))
rm(list=ls())
library(tidyverse)
geih <-read.xlsx(here("stores","geih_4.xlsx"))
geih <-read.xlsx(here("stores","geih_final.xlsx"))
geih_earnings_cmplt <- geih_5[complete.cases(geih_5[,c("y_ingLab_m_2","female","age","cuentaPropia","college_2","formal","oficio")]),] %>%
filter(oficio!=78)
geih <-read.xlsx(here("stores","geih_final.xlsx"))
set.seed(10101)
#Muestra de entrenamiento
id_test <- sample(1:nrow(geih_earnings_cmplt),nrow(geih_earnings_cmplt)*0.3)
test_set <- geih_earnings_cmplt[id_test,]
training_set <- geih_earnings_cmplt[-id_test,]
geih_earnings_cmplt <- geih[complete.cases(geih[,c("y_ingLab_m_2","female","age","cuentaPropia","college_2","formal","oficio")]),] %>%
filter(oficio!=78)
#Se usan solo las filas que contienen todas las variables. Esto es lo que hace LM por debajo. Pero para dividir correctamente trainign/test
#y comparar con los valores reales, se debe hacer desde el inciio.
geih_earnings_cmplt <- geih[complete.cases(geih[,c("y_ingLab_m_2","female","age","cuentaPropia","college_2","formal","oficio")]),] %>%
filter(oficio!=78)
set.seed(10101)
#Muestra de entrenamiento
id_test <- sample(1:nrow(geih_earnings_cmplt),nrow(geih_earnings_cmplt)*0.3)
test_set <- geih_earnings_cmplt[id_test,]
training_set <- geih_earnings_cmplt[-id_test,]
#Especificacion 1: earnings~age+age^2
lm_spc1 <- lm(y_ingLab_m_2~age+I(age^2),training_set)
pred_lm_spc1 <- predict.lm(lm_spc1,test_set)
#Especificacion 2: log(earnings)~female
lm_spc2 <- lm(log(y_ingLab_m_2+1)~female,training_set)
pred_lm_spc2 <- predict.lm(lm_spc2,test_set)
#Especificacion 3:
lm_spc3 <- lm(y_ingLab_m_2~female+age+I(age^2),training_set)
pred_lm_spc3 <- predict.lm(lm_spc3,test_set)
#Especificacion 4:
lm_spc4 <- lm(y_ingLab_m_2~female+age+I(age^2)+cuentaPropia,training_set)
pred_lm_spc4 <- predict.lm(lm_spc4,test_set)
#Especificacion 5:
lm_spc5 <- lm(y_ingLab_m_2~female+age+I(age^2)+cuentaPropia+college_2,training_set)
pred_lm_spc5 <- predict.lm(lm_spc5,test_set)
#Especificacion 6:
lm_spc6 <- lm(y_ingLab_m_2~female+age+I(age^2)+cuentaPropia+college_2+formal,training_set)
pred_lm_spc6 <- predict.lm(lm_spc6,test_set)
#Especificacion 7:
lm_spc7 <- lm(y_ingLab_m_2~female+age+I(age^2)+cuentaPropia+
college_2+formal+I(college_2*formal),training_set)
pred_lm_spc7 <- predict.lm(lm_spc7,test_set)
#Especificacion 8:
lm_spc8 <- lm(y_ingLab_m_2~female+age+I(age^2)+
cuentaPropia+college_2+formal+I(college_2*formal)+factor(oficio),training_set)
pred_lm_spc8 <- predict.lm(lm_spc8,test_set)
rmse=tibble()
models <- list(lm_spc1,lm_spc2,lm_spc3,lm_spc4,lm_spc5,lm_spc6,lm_spc7,lm_spc8)
for (i in 1:8){
if(i==2){
pred <- predict.lm(models[[i]],test_set)
rmse <- tibble("RMSE"=sqrt(sum((test_set$y_ingLab_m_2-exp(pred))^2)),
modelo=paste("Modelo",i)) %>%
bind_rows(rmse)
}else{
pred <- predict.lm(models[[i]],test_set)
rmse <- tibble("RMSE"=sqrt(sum((test_set$y_ingLab_m_2-pred)^2)),
modelo=paste("Modelo",i)) %>%
bind_rows(rmse)
}
}
#El mejor modelo es el modelo 8 y el siguiente mejor el modelo 7.
rmse %>%
arrange(rmse) %>%
slice_head(n=2)
#La partición de datos de prueba en un formato similar al utilizado en la estimación está dada por:
x_test <- model.matrix(y_ingLab_m_2~female+age+I(age^2)+
cuentaPropia+college_2+formal+I(college_2*formal)+factor(oficio),test_set)
#Los residuales de la predicción de los datos de prueba es:
residuals_test <- test_set$y_ingLab_m_2-pred_lm_spc8
#La matrix proyectada para la partición de datos de prueba es:
hat_matrix <- x_test %*% solve( t(x_test) %*% x_test ) %*% t(x_test)
#Los estadísticos de leverage son entonces:
h_coef <- diag(hat_matrix)
#Entonces los estadísticos de influencia son:
influence_coef <- residuals_test/(1-h_coef)
#Haciendo un diagrama de dispersión
influence_coef %>%
tibble("influencia"=.,"y_true"=test_set$y_ingLab_m_2) %>%
rowid_to_column("id_prediccion") %>%
mutate(abs_influencia=abs(influencia)) %>%
ggplot(.)+
geom_point(aes(x=log(abs_influencia),y=log(y_true+1)),color="darkred")+
xlab("Logaritmo del valor absoluto del estadístico de influencia")+
ylab("Logaritmo del ingreso laboral")+
theme_bw()+
theme(text=element_text(size=14, color="black"),
panel.grid=element_blank(),
panel.spacing = unit(1, "lines"),
legend.position=c(0.85,0.85),
axis.text.x=element_text(colour="black"),
axis.text.y=element_text(colour="black"),
strip.background = element_blank(),
strip.placement = "outside",
strip.text = element_text(face="bold"))
